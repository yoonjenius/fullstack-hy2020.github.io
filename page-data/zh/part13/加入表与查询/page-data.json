{"componentChunkName":"component---src-templates-content-template-js","path":"/zh/part13/加入表与查询","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Application structuring</h3>\n<!-- So far, we have written all the code in the same file. Now let's structure the application a little better. Let's create the following directory structure and files: -->\n<p>到目前为止，我们已经在同一个文件中编写了所有的代码。现在我们来优化下应用程序的结构。我们创建如下的目录结构和文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">index.js\nutil\n  config.js\n  db.js\nmodels\n  index.js\n  note.js\ncontrollers\n  notes.js</code></pre></div>\n<!-- The contents of the files are as follows. The file <i>util/config.js</i> takes care of handling the environment variables: -->\n<p>文件的内容如下。文件 <i>util/config.js</i>  负责处理环境变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">DATABASE_URL</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The role of the file <i>index.js</i> is to configure and launch the application: -->\n<p>文件 <i>index.js</i> i 的角色是配置和启动应用程序：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PORT</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> connectToDatabase <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> notesRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/notes'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> notesRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Starting the application is slightly different from what we have seen before, because we want to make sure that the dabase connection is established successfully before the actual startup. -->\n<p>启动应用程序与我们之前看到的稍有不同， 因为我们希望确保在实际启动之前成功地建立数据库连接。</p>\n<!-- The file <i>util/db.js</i> contains the code to initialize the database: -->\n<p>文件  <i>util/db.js</i> 包含了初始化数据库的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Sequelize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">DATABASE_URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connectToDatabase</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'database connected'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connecting database failed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> connectToDatabase<span class=\"token punctuation\">,</span> sequelize <span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The notes in the model corresponding to the table to be stored are saved in the file <i>models/note.js</i> -->\n<p>与要存储的表对应的模型中的Note 保存在了文件  <i>models/note.js</i> 中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    autoIncrement<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  underscored<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  modelName<span class=\"token operator\">:</span> <span class=\"token string\">'note'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note</code></pre></div>\n<!-- The file <i>models/index.js</i> is almost useless at this point, as there is only model in the application. When we start adding other models to the application, the file will become more useful because it will eliminate the need to import files defining individual models from the rest of the application. -->\n<p>目前，文件 <i>models/index.js</i>  几乎毫无用处，因为应用程序中只有一个模型。当我们开始向应用程序中添加其他模型时，该文件将变得更加有用，因为它将消除从应用程序的其余部分导入单个模型的需要。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Note\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The routers handling associated with the notes can be found the file <i>controllers/notes.js</i>: -->\n<p>与Note 相关的路由可以在 <i>controllers/notes.js</i> 中找到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Note <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<!-- The structure of the application is good now. However, we note that the router handlers that handle a single note contain a bit of repetitive code, as all of them begin with the line that searches for the note to be handled: -->\n<p>目前应用程序的结构是良好的。然而，我们注意到，处理单个note的路由器处理程序包含一些重复的代码，因为所有这些处理程序都以搜索要处理的note的行开始:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Let's refactor this into our own <i>middleware</i> and implement it in route handlers: -->\n<p>让我们把它重构到我们自己的中间件<i>middleware</i>中，并在路由处理程序中实现它</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteFinder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span>note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- The route handlers now receive <i>three</i> parameters, the first being a string defining the route and second being the middleware <i>noteFinder</i> we defined earlier, which retrieves the note from the database and places it in the field of the <i>req</i> object in the <i>note</i>. A small amount of copypaste is eliminated and we are satisfied! -->\n<p>路由处理现在接受三个参数，第一个是一个定义路由的字符串，第二个是我们前面定义的中间件   <i>noteFinder</i>， 它会从数据库中检索note， 并将其放置在 <i>note</i> 中的<i>req</i> 对象中。我们删除了部分冗余代码，看起来不错！</p>\n<!-- The current code for the application is in its entirety in [GitHub](https://github.com/fullstack-hy/part132-notes/tree/part13-2), branch <i>part13-2</i>. -->\n<p>当前的应用可以在  <a href=\"https://github.com/fullstack-hy/part132-notes/tree/part13-2\">GitHub</a> 中找到，处于 <i>part13-2</i> 分支。</p>\n</div>\n<div class=\"tasks\">\n<h3>Tasks 13.5.-13.7.</h3>\n<h4>Task 13.5.</h4>\n<!-- Change the structure of your application to match the example above, or to follow some other similar clear convention. -->\n<p>更改应用程序的结构以匹配上面的示例，或遵循其他类似的清晰约定。</p>\n<h4>Task 13.6.</h4>\n<!-- Also, implement in the application support for changing the number of blog's likes, i.e. the operation -->\n<p>另外，在应用程序支持中实现更改博客喜欢的数量，即操作</p>\n<!-- _PUT /api/blogs/:id_ (modifying the like count of a blog) -->\n<p><em>PUT /api/blogs/:id</em> （更改喜欢的数量）</p>\n<!-- The updated number of likes will be relayed with the request: -->\n<p>更新的点赞数目会随request转递:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  likes<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Task 13.7.</h4>\n<!-- Centralize the application error handling in middleware as in [part 3](/part3/data_storage_in_mongo_db_database#debugging_centralization_in_middleware). You can also enable middleware [express-async-errors](https://github.com/davidbanham/express-async-errors) as we did in [part 4](/part4/backend_testing#try-catchin-elimination). -->\n<p>在中间件中集中处理应用程序错误，如第3部分<a href=\"/part3/data_storage_in_mongo_db_database#debugging_centralization_in_middleware\">part 3</a>所示。您还可以启用中间件  <a href=\"https://github.com/davidbanham/express-async-errors\">express-async-errors</a> ，就像我们在第4部分<a href=\"/part4/backend_testing#try-catchin-elimination\">part 4</a>中所做的那样。</p>\n<!-- The data returned in the context of an error message is not very important. -->\n<p>在错误消息的上下文中返回的数据并不十分重要。</p>\n<!-- At this point, the situations that require error handling by the application are creating a new blog and changing the number of likes on the blog. Make sure the error handler handles both of these appropriately. -->\n<p>此时，需要应用程序进行错误处理的情况是创建一个新博客并更改博客上的赞数。确保错误处理程序适当地处理这两个问题。</p>\n</div>\n<div class=\"content\">\n<h3>User management</h3>\n<!-- Next, let's add a database table <i>users</i> to the application, where the users of the application will be stored. In addition, the possibility of creating users and token-based login as in [part 4](/part4/token_based_login) is implemented. For simplicity, we now make the implementation so that all users will have the same password <i>secret</i>. -->\n<p>接下来，让我们向应用程序添加一个数据库表用户，应用程序的用户将存储在该表中。此外，还实现了在<a href=\"/part4/token_based_login\">part 4</a> 中创建用户和基于token的登录的可能性。为了简单起见，我们现在使实现使所有用户都拥有相同的密码<i>secret</i>。</p>\n<!-- The user-defining model in the file <i>models/user.js</i> is straightforward -->\n<p>文件 <i>models/user.js</i> 中的用户定义模型非常简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    autoIncrement<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  underscored<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  modelName<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User</code></pre></div>\n<!-- The username is conditioned to be unique. The username could have basically been used as the master key of the table. However, we decided to create the master key as a separate field with integer value <i>id</i>. -->\n<p>用户名必须是唯一的。用户名基本上可以用作表的主密钥。但是，我们决定将主密钥创建为一个整数值  <i>id</i> ，作为单独字段。</p>\n<!-- The file <i>models/index.js</i> expands slightly: -->\n<p>文件  <i>models/index.js</i> 稍微扩展为:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">User<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  Note<span class=\"token punctuation\">,</span> User</span><span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The route handlers that take care of creating a new user in the <i>controllers/users.js</i> file and displaying all users do not contain anything dramatic -->\n<p>在 <i>controllers/users.js</i> 文件中创建新用户并显示所有用户的路由处理程序不包含任何惊喜的内容</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<!-- The router handler that handles the login (file <i>controllers/login.js</i>) is as follows: -->\n<p>处理登录的路由器处理程序(文件<i>controllers/login.js</i>)如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SECRET</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>username\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> <span class=\"token string\">'secret'</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<!-- The POST request request will be accompanied by a users name (<i>username</i>) and users password (<i>password</i>). First, the object corresponding to the user is retrieved from the database using the model <i>User</i> with method [findOne](https://sequelize.org/master/manual/model-querying-finders.html#-code-findone--code-): -->\n<p>POST 请求将附带一个用户名(<i>username</i>)和用户密码(<i>password</i>)。首先，使用模型 User 的方法  <a href=\"https://sequelize.org/master/manual/model-querying-finders.html#-code-findone--code-\">findOne</a> 从数据库中检索与用户对应的对象:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>username\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- From the console, we can see that SQL statement is corresponding to the method call -->\n<p>从控制台，我们可以看到 SQL 语句对应于方法调用</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"User\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"username\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- If the user is found and the password is correct (i.e. _secret_ for all the users), <i>jsonwebtoken</i> is returned to the called containing the user's information. To do this, we install a dependency -->\n<p>如果找到用户并且密码正确(即所有用户的 <em>secret</em>) ，<i>jsonwebtoken</i> 将返回给包含用户信息的被调用者。为此，我们安装了一个依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install jsonwebtoken</code></pre></div>\n<!-- The file <i>index.js</i> expands slightly -->\n<p> <i>index.js</i>  文件稍微扩展为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notesRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/notes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> notesRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<!-- The current code for the application is in its entirety in [GitHub](https://github.com/fullstack-hy/part13-notes/tree/part13-3), branch <i>part13-3</i>. -->\n<p>应用程序的当前代码全部在  <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-3\">GitHub</a>，分支 part13-3中。</p>\n<h3>Connection between the tables</h3>\n<!-- Users can now be added to the application and users can log in, but in itself this is not a very useful feature. The idea is that only a logged user can add notes, and that each note is associated with the user who created it. To do this, we need the notes of the <i>reference key</i> to the stored table <i>notes</i>. -->\n<p>用户现在可以添加到应用程序中，用户可以登录，但是这本身并不是一个非常有用的特性。原因是，只有登录的用户才能添加note，并且每个note都与创建它的用户相关联。为此，我们需要note 的 <i>reference key</i> 来存储表 <i>notes</i>。</p>\n<!-- When using Sequelize, the reference key can be defined by modifying the <i>models/index.js</i> file as follows -->\n<p>在使用 Sequelize 时，可以通过如下修改<i>models/index.js</i>文件来定义引用键</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// hightlight-start</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> alter<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> alter<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// hightlight-end</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">,</span> User\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- So this is how we [define](https://sequelize.org/master/manual/assocs.html#one-to-many-relationships) that there is a _one to many_ relationship connection between the <i>users</i> and <i>notes</i> lines. We also changed <i>sync</i> calls so that they change the tables if there were any changes to the table definition. Now looking at the database schema from the console, it looks like the following: -->\n<p>这就是我们如何定义 <a href=\"https://sequelize.org/master/manual/assocs.html#one-to-many-relationships\">define</a>，用户<i>users</i> 和 <i>notes</i>  行之间有一对多的关系连接。我们还修改了<i>sync</i> 调用，以便在表定义有任何更改时修改表。现在从控制台查看数据库schema，它看起来如下所示:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d users\n                                     Table <span class=\"token string\">\"public.users\"</span>\n  Column <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> Default\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token function\">nextval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users_id_seq'</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>regclass<span class=\"token punctuation\">)</span>\n username <span class=\"token operator\">|</span> character <span class=\"token function\">varying</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n name <span class=\"token operator\">|</span> character <span class=\"token function\">varying</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\nIndexes<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"users_pkey\"</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token function\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\nReferenced by<span class=\"token operator\">:</span>\n    <span class=\"token constant\">TABLE</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">CONSTRAINT</span> <span class=\"token string\">\"notes_user_id_fkey\"</span> <span class=\"token constant\">FOREIGN</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token constant\">REFERENCES</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">UPDATE</span> <span class=\"token constant\">CASCADE</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">DELETE</span> <span class=\"token constant\">SET</span> <span class=\"token constant\">NULL</span>\n\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d notes\n                                      Table <span class=\"token string\">\"public.notes\"</span>\n  Column <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> Default\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token function\">nextval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes_id_seq'</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>regclass<span class=\"token punctuation\">)</span>\n content <span class=\"token operator\">|</span> text <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n important <span class=\"token operator\">|</span> boolean <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n date <span class=\"token operator\">|</span> timestamp <span class=\"token keyword\">with</span> time zone <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n user_id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\nIndexes<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"notes_pkey\"</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token function\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\nForeign<span class=\"token operator\">-</span>key constraints<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"notes_user_id_fkey\"</span> <span class=\"token constant\">FOREIGN</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token constant\">REFERENCES</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">UPDATE</span> <span class=\"token constant\">CASCADE</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">DELETE</span> <span class=\"token constant\">SET</span> <span class=\"token constant\">NULL</span></code></pre></div>\n<!-- That is, the reference key <i>user_id</i> has been created in the <i>notes</i> table, which refers to the <i>users</i> rows on the table. -->\n<p>也就是说，引用键 <i>user_id</i> 已经在  <i>notes</i> 表中创建，该表引用表中的用户<i>users</i> 的行。</p>\n<!-- Now let's make a change to the insertion of a new note that the note is associated to the user. Before we make a proper implementation (where the join occurs using token to the user who is logged in), attach the note to the first user found in the database: -->\n<p>现在，让我们更改插入的新note，该note与用户相关联。在我们进行适当的实现之前(在联接发生时，使用 token 将note附加到登录的用户) ，将note附加到数据库中找到的第一个用户:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hightlight-start</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// hightlight-end</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- What is worthy of attention in the code is that although there is a column <i>user\\_id</i> in the notes at the database level, in the corresponding object in the database row it is referred to by Sequelize naming convention due to to camel case as <i>userId</i>. -->\n<p>在代码中值得注意的是，尽管在数据库级别的note中有一个列  <i>user_id</i>，但是在数据库行的相应对象中，由于驼峰式大小写为 <i>userId</i>，这使用了 Sequelize 变量命名原则。</p>\n<!-- Making a simple join query is very easy. Let's change the route that looks like all users so that is also shows each user's notes: -->\n<p>制作一个简单的连接查询非常简单。我们改变像所有用户的路由，这样也可以显示每个用户的note:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      model<span class=\"token operator\">:</span> Note</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- So the join query is done using the [include](https://sequelize.org/master/manual/assocs.html#eager-loading-example) wrapper on the query parameter. -->\n<p>因此，连接查询是使用查询参数上的 <a href=\"https://sequelize.org/master/manual/assocs.html#eager-loading-example\">include</a>  包装来完成的。</p>\n<!-- The sql statement generated from the query is seen on the console: -->\n<p>查询生成的 sql 语句可以在控制台上看到:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT &quot;User&quot;. &quot;id&quot;, &quot;User&quot;. &quot;username&quot;, &quot;User&quot;. &quot;name&quot;, &quot;Notes&quot;. &quot;id&quot; AS &quot;Notes.id&quot;, &quot;Notes&quot;. &quot;content&quot; AS &quot;Notes.content&quot;, &quot;Notes&quot;. &quot;important&quot; AS &quot;Notes.important&quot;, &quot;Notes&quot;. &quot;date&quot; AS &quot;Notes.date&quot;, &quot;Notes&quot;. &quot;user_id&quot; AS &quot;Notes.UserId&quot;\nFROM &quot;users&quot; AS &quot;User&quot; LEFT OUTER JOIN &quot;notes&quot; AS &quot;Notes&quot; ON &quot;User&quot;. &quot;id&quot; = &quot;Notes&quot;. &quot;user_id&quot;;</code></pre></div>\n<!-- The end result is also as you might expect -->\n<p>最终结果也正如你所期望的那样</p>\n<picture><img src=\"/static/3f5652175b7932d862124009e4441687/5a190/1.png\" srcset=\"/static/3f5652175b7932d862124009e4441687/772e8/1.png 200w,\n/static/3f5652175b7932d862124009e4441687/e17e5/1.png 400w,\n/static/3f5652175b7932d862124009e4441687/5a190/1.png 800w,\n/static/3f5652175b7932d862124009e4441687/c1b63/1.png 1200w,\n/static/3f5652175b7932d862124009e4441687/ae28e/1.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><em>TODO: where in include is an example (e.g. notes where <code class=\"language-text\">important: true</code>)?</em></p>\n<h3>Proper insertion of notes</h3>\n<!-- Let's change the note insertion by making it work the same as in [section 4](/section4), i.e. the creation of a note can only be successful if the request corresponding to the creation is accompanied by a valid token on login. The note is stored in the list of noted created by the user identified by the token: -->\n<p>让我们通过与<a href=\"/section4\">section 4</a>相同来改变note的插入来使其工作，即note的创建只有在与创建相对应的请求在登录时伴随有有效的令牌时才能成功。这个note被存储在由标记用户创建的note列表中:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      req<span class=\"token punctuation\">.</span>decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'token missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> tokenExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Token is taken and decoded to the request from the headers and placed in the <i>req</i> token by the <i>tokenExtractor</i> middleware. When creating a note, a <i>date</i> is also given to the field indicating the time it was created. -->\n<p>令牌由 <i>tokenExtractor</i>  中间件从头部获取并解码到请求，并放置在  <i>req</i>  令牌中。在创建备注时，还会向字段提供一个 <i>date</i> ，指示创建该字段的时间。</p>\n<h3>Fine-tuning</h3>\n<!-- Our backend currently works almost the same way as Part 4 version of the same application, expect for error handling. Before we make a few extensions to backend, let's change the routes of all notes and all users slightly. -->\n<p>除了错误处理之外，我们的后端目前的工作方式几乎与同一应用程序的第4部分版本相同。在对后端进行一些扩展之前，让我们稍微更改一下所有note和所有用户的路由。</p>\n<!-- We will add a note with information about the user who added it: -->\n<p>我们将添加一个note，说明添加该note的用户的信息:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- We have also [restricted](https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries) the values of which fields we want. From the notes, we take all fields expect <i>userId</i> and for the user associated with the note, only <i>name</i>. -->\n<p>我们还限制了 <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries\">restricted</a>  所需字段的值。从note中，我们获取除 userId 之外的所有字段，对于与note关联的用户，只获取名称。</p>\n<!-- Let's make a similar change to the route of all users, remove the unnecessary field <i>userId</i> from the notes associated with the user: -->\n<p>让我们对所有用户的路由进行类似的更改，从与用户相关的note中删除不必要的字段 userId:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> note<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- The current code for the application is in its entirety in [GitHub](https://github.com/fullstack-hy/part13-notes/tree/part13-4), branch <i>part13-4</i>. -->\n<p>应用程序的当前代码全部在 <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-4\">GitHub</a>，分支 part13-4中。</p>\n<h3>Attention on the definition of models</h3>\n<!-- The most perceptible noticed that despite of added column <i>user_id</i>, we did not make a change to the model that defined notes, but we can add a user for notes objects: -->\n<p>最明显的注意到，尽管添加了列用户 id，我们并没有对定义note的模型进行修改，但是我们可以为 notes 对象添加一个用户:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- The reason for this is that when we defined in the file <i>models/index.js</i> that there is a one-to-many connection between users and notes: -->\n<p>原因是当我们在文件 <i>models/index.js</i> 中定义时，用户和注释之间存在一对多的连接:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<!-- Sequelize will automatically create in the module <i>Note</i> attribute called <i>userId</i> to which, when referenced we get access to the database column <i>user_id</i>. -->\n<p>Sequelize 将在名为 <i>userId</i>  的模块  <i>Note</i>  属性中自动创建，当引用该属性时，我们可以访问数据库列  <i>user_id</i>。</p>\n<!-- Keep in mind, that we could also create a note as follows using method [build](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-build): -->\n<p>请记住，我们也可以使用 method  <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-build\">build</a> 创建如下注释:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// luodaan muistiinpano tallettamatta sitä vielä</span>\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// sijoitetaan käyttäjän id mustiinpanolle</span>\nnote<span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>id\n<span class=\"token comment\">// talletetaan muistiinpano-olio tietokantaan</span>\n<span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- This is how we explicitly see the fact that <i>userId</i> is an attribute of the notes object. -->\n<p>这就是我们如何明确地看到 <i>userId</i> 是 notes 对象的一个属性这一事实。</p>\n<!-- We could define the same for model <i>as well</i>: -->\n<p>我们也可以定义相同的模型:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    autoIncrement<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  userId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    references<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> model<span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  underscored<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  modelName<span class=\"token operator\">:</span> <span class=\"token string\">'note'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note</code></pre></div>\n<!-- however this is not necessary. Definition at the level of model classes -->\n<p>然而，这是不必要的。定义在模型类的水平</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span></code></pre></div>\n<!-- instead is necessary, otherwise Sequelize does not know how at the code level to attach tables to each other. -->\n<p>相反是必要的，否则 Sequelize 不知道如何在代码级别相互附加表。</p>\n</div>\n<div class=\"tasks\">\n<h3>Tasks 13.8.-13.11.</h3>\n<h4>Task 13.8.</h4>\n<!-- Add support for users to the application. In addition to the ID, users have the following fields: -->\n<p>为应用程序添加用户支持。除了 ID 之外，用户还有以下字段:</p>\n<ul>\n<li>name (string, must not be empty)</li>\n<li>username (string, must not be empty)</li>\n</ul>\n<!-- Unlike in the material, do not now prevent Sequelize from creating [timestamps](https://sequelize.org/master/manual/model-basics.html#timestamps) <i>created\\_at</i> and <i>updated\\_at</i> for users -->\n<p>与教材不同，现在不要阻止 Sequelize 为用户创建 <i>created_at</i>  和 <i>updated_at</i> 的 <a href=\"https://sequelize.org/master/manual/model-basics.html#timestamps\">timestamps</a></p>\n<!-- All users can have the same password as the material. You can also choose to properly implement the password as in [part 4](/part4/user_management). -->\n<p>所有用户都可以使用与教材中相同的密码。您还可以选择正确地实现第4部分<a href=\"/part4/user_management\">part 4</a>中的密码。</p>\n<!-- Implement the following routes -->\n<p>实现如下路由</p>\n<ul>\n<li><em>POST api/users</em> (adding new user)</li>\n<li><em>GET api/users</em> (listing of all users)</li>\n<li><em>PUT api/users:/:username</em> (change of user name, keep in mind that the parameters is not id but username)</li>\n</ul>\n<!-- Make sure that the timestamps <i>created_at</i> and <i>updated_at</i> automatically set by Sequelize work correctly when creating creating a new user and changing the user's name. -->\n<p>在创建新用户和更改用户名称时，确保 <i>created<em>at</i> 和 <i>updated</em>at</i> Sequelize 工作自动创建的正确性。</p>\n<h4>Exercise 13.9.</h4>\n<!-- Sequelize provide a set of pre-defined [validations](https://sequelize.org/master/manual/validations-and-constraints.html) for the model fields, which it performs before storing the objects in the database. -->\n<p>Sequelize 为模型字段提供一组预定义的验证 <a href=\"https://sequelize.org/master/manual/validations-and-constraints.html\">validations</a>，它在将对象存储到数据库之前执行这些验证。</p>\n<!-- It is decided to change the user name creation policy so that only a valid email address is valid as username. Make a validation in during with the creation of the the ID to check this. -->\n<p>决定更改用户名创建策略，以便只有有效的电子邮件地址作为用户名是有效的。在创建 ID 时进行验证来检查。</p>\n<!-- Modify the error handling middleware to provide a more descriptive error message in the situation (using the Sequelize error message), e.g. -->\n<p>修改错误处理中间件，在这种情况下提供更多描述性的错误消息(使用 Sequelize 错误消息) ，例如。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"Validation isEmail on username failed\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Exercise 13.10.</h4>\n<!-- Expand the application so that the blog is attached to the logged user to be identified by a token. So you will also need to implement a login endpoint _POST /api/login_, which then returns the token. -->\n<p>扩展应用程序，以便将 blog 附加到要通过令牌标识的登录用户。因此，您还需要实现登录端点<em>POST /api/login</em>，然后它返回令牌。</p>\n<h4>Exercise 13.11.</h4>\n<!-- Make deletion of the blog only possible for the user who added the blog. -->\n<p>只有添加博客的用户才可以删除博客。</p>\n<h4>Task 13.12.</h4>\n<!-- Modify the route for blogs and users so that the blogs show the user who added the blog and the user shows the users's blogs. -->\n<p>修改博客和用户的路径，以便博客显示添加博客的用户，用户显示用户的博客。</p>\n</div>\n<div class=\"content\">\n<h3>More queries</h3>\n<!-- So far our application has been very simple in terms of queries, queries have searched either a single row based on the master key using the METHOD [findByPk](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findByPk) or they have searched for all rows in the table using the method [findAll](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findAll). These are sufficient for the frontend of the application made in Section 5, but let's expand the backend so that we can also practice making slightly more complex queries. -->\n<p>到目前为止，我们的应用程序在查询方面非常简单，查询使用 METHOD  <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findByPk\">findByPk</a>  搜索基于主键的单行，或者使用 <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findAll\">findAll</a>. 方法搜索表中的所有行。这些对于第5节中所做的应用程序的前端已经足够了，但是让我们扩展后端，以便我们还可以练习进行稍微复杂一点的查询。</p>\n<!-- Let's first implement the possibility to retrieve only important or non-important notes. Let's implement these using the [query-parameter](http://expressjs.com/en/5x/api.html#req.query) important: -->\n<p>让我们首先实现只检索重要的或者不重要的note的可能性，我们利用  <a href=\"http://expressjs.com/en/5x/api.html#req.query\">query-parameter</a>  来实现重要性搜索:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      important<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Now the backend can retrieve important notes with a request to http://localhost:3001/api/notes?important=true and non-important notes with a request to http://localhost:3001/api/notes?important=false -->\n<p>现在，后端可以检索重要的note，请求 <a href=\"http://localhost:3001/api/notes?important=true\">http://localhost:3001/api/notes?important=true</a> ，请求 <a href=\"http://localhost:3001/api/notes?important=false\">http://localhost:3001/api/notes?important=false</a> 获得非重要的note</p>\n<!-- The SQL query generated by Sequelize contains a where clause that delimits naturally returning rows: -->\n<p>由 Sequelize 生成的 SQL 查询包含一个 where 子句，用于分隔自然返回的行:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- Unfortunately, this implementation will not work if the request is not interested in whether the note is important or not, i.e. if the request is made to http://localhost:3001/api/notes. The correction can be done in several ways. One, but perhaps not the best way to do the correction would be as follows: -->\n<p>不幸的是，如果请求对note是否重要不感兴趣，例如请求是否发送给 <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> ，那么这种实现将不起作用。可以通过几种方式进行修正。其一，但也许不是最好的纠正方式是:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token keyword\">let</span> important <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//highlight-end</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      important</span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- The <i>important</i> object now stores the query condition. It's by default -->\n<p> <i>important</i>  的对象现在存储查询条件。它是默认的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  important<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- i.e. the column <i>important</i> can be <i>true</i> or <i>false</i>, using one of the many Sequelize operations [Op.in](https://sequelize.org/master/manual/model-querying-basics.html#operators). If the query parameter <i>req.query.important</i> is defined, turns query into either form -->\n<p>例如，使用许多 Sequelize 操作  <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">Op.in</a> 中的一个，列的  <i>important</i>  可以是  <i>true</i>  或  <i>false</i>。如果定义了查询参数 <i>req.query.important</i>，则将查询转换为其中一种形式</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or\n或者</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- depending on the value of the query parameter. -->\n<p>取决于查询参数的值。</p>\n<!-- Extend the functionality further by allowing you to specify the required keyword when retrieving notes, e.g. a request to http://localhost:3001/api/notes?search=database will return all notes with mentioning <i>database</i> or a request to http://localhost:3001/api/notes?search=javascript&important=true will return all notes marked as important with mentioning <i>javascript</i>. Implementation is as follows -->\n<p>通过允许你在检索note时指定所需的关键字来进一步扩展这个功能，例如向 <a href=\"http://localhost:3001/api/notes?search=database\">http://localhost:3001/api/notes?search=database</a> 提出的请求将返回所有提及database的note，或者向 <a href=\"http://localhost:3001/api/notes?search=javascript&#x26;important=true\">http://localhost:3001/api/notes?search=javascript&#x26;important=true</a> 提出的请求将返回所有标记为重要的提及 javascript 的笔记。具体实施情况如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> important <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      important<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search <span class=\"token operator\">:</span> <span class=\"token string\">''</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Sequelize's [Op.substring](https://sequelize.org/master/manual/model-querying-basics.html#operators) generates the query we want using the like keyword in SQL. For example, if we make a query to http://localhost:3001/api/notes?search=database&important=true we will see that the SQL query it generates is exactly as we assumed. -->\n<p>Sequelize 的  <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">Op.substring</a>  使用 SQL 中的 like 关键字生成我们想要的查询。例如，如果我们向 <a href=\"http://localhost:3001/api/notes?search=database&#x26;important=true\">http://localhost:3001/api/notes?search=database&#x26;important=true</a> 查询，我们会看到它生成的 SQL 查询与我们假设的完全一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%database%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- There is still such a beauty flaw in our application that if we make a request http://localhost:3001/api/notes, i.e. we want all the notes, our implementation will cause a unnecessary where in the query, which may (depending on the implementation of the database engine) unnecessarily affect the query efficiency: -->\n<p>在我们的应用程序中仍然存在这样一个美丽的缺陷，如果我们发出一个请求 <a href=\"http://localhost:3001/api/notes%EF%BC%8C%E5%8D%B3%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E6%89%80%E6%9C%89%E7%9A%84notes%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%B0%86%E5%AF%BC%E8%87%B4%E6%9F%A5%E8%AF%A2%E4%B8%AD%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%BF%99%E5%8F%AF%E8%83%BD%EF%BC%88%E5%8F%96%E5%86%B3%E4%BA%8E\">http://localhost:3001/api/notes，即我们想要所有的notes，我们的实现将导致查询中不必要的位置，这可能（取决于</a> 关于数据库引擎的实现）不必要地影响查询效率：</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- Let's optimize the code so that the where-conditions are used only if necessary: -->\n<p>让我们优化代码，以便只在必要时使用 where 条件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> where <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    where<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    where<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      model<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    where\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- If the request has search conditions e.g. http://localhost:3001/api/notes?search=database&important=true, a query containing where is formed -->\n<p>如果请求具有搜索条件，例如 <a href=\"http://localhost:3001/api/notes?search=database&#x26;important=true\">http://localhost:3001/api/notes?search=database&#x26;important=true</a> ，则查询包含形成的位置</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%database%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- If the request is unconditional http://localhost:3001/api/notes, then the query does not have unnecessary where -->\n<p>如果请求是无条件的 <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> ，那么查询就没有不必要的地方</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- The current code for the application is in its entirety in [GitHub](https://github.com/fullstack-hy/part13-notes/tree/part13-5), branch <i>part13-5</i>. -->\n<p>应用程序的当前代码全部在  <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-5\">GitHub</a>，分支 part13-5中。</p>\n</div>\n<div class=\"tasks\">\n<h3>Tasks 13.13.-13.16</h3>\n<h4>Task 13.13.</h4>\n<!-- Implement filtering by keyword in the application for the route returning all blogs. The filtering works as follows -->\n<p>在应用程序中为返回所有博客的路由实现按关键字过滤</p>\n<ul>\n<li><em>GET /api/blogs?serch=react</em> returns all blogs with the search word <i>react</i> in the <i>title</i> field, the search word is not case sensitive</li>\n<li><em>GET /api/blogs</em> returns all blogs</li>\n</ul>\n<p><a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">This</a> should be useful for this task and the next one.\n这<a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">This</a> 对这个任务和下一个任务都是有用的。</p>\n<h4>Exercise 13.14.</h4>\n<!-- Expand the filter to search for a keyword in the <i>title</i> and author <i>author</i> fields, i.e. -->\n<p>展开过滤器，在  <i>title</i> 和 <i>author</i>  字段中搜索关键字，即。</p>\n<!-- _GET /api/blogs?serch=jami_ returns blogs with the search word <i>jami</i> in the <i>title</i> field or <i>author</i> in the <i>author</i> field -->\n<p><em>GET /api/blogs?serch=jami</em> 返回 <i>title</i> 字段中的搜索词 <i>jami</i> 或  <i>author</i>  字段中的  <i>author</i>  的 blog</p>\n<h4>Exercise 13.15.</h4>\n<!-- Modify the blog route so that it returns blogs based on likes in descending order. Search in [documentation](https://sequelize.org/master/manual/model-querying-basics.html) for instructions on ordering, -->\n<p>修改博客路由，使其按照喜欢降序返回博客。在文档 <a href=\"https://sequelize.org/master/manual/model-querying-basics.html\">documentation</a> 中搜索有关排序的说明,</p>\n<h4>Task 13.16.</h4>\n<!-- Make a route for the application /api/authors that returns the number of blogs for each author and the total number of likes. Implement the operation directly at the database level. You will most likely need the [group by](https://sequelize.org/master/manual/model-querying-basics.html#grouping) functionality, and the [sequelize.fn](https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries) aggregator function. -->\n<p>为应用程序/api/authors 创建一个路由，该路由返回每个作者的博客数量和喜欢的总数。直接在数据库级别实现操作。您很可能需要 <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#grouping\">group by</a> ，以及  <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries\">sequelize.fn</a>  聚合器函数。</p>\n<!-- The JSON returned by the route might look like the following, for example: -->\n<p>路由返回的 JSON 可能看起来像下面这样，例如:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    author: &quot;Jami Kousa&quot;,\n    articles: &quot;3&quot;,\n    likes: &quot;10&quot;\n  },\n  {\n    author: &quot;Kalle Ilves&quot;,\n    articles: &quot;1&quot;,\n    likes: &quot;2&quot;\n  },\n  {\n    author: &quot;Dan Abramov&quot;,\n    articles: &quot;1&quot;,\n    likes: &quot;4&quot;\n  }\n]</code></pre></div>\n<!-- Bonus task: order the data to be returned based on the likes, do the ordering in the database query. -->\n<p>奖励任务: 根据喜好对返回的数据进行排序，在数据库查询中进行排序。</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/a912ccd5077570e9e5104b4d7b908c3c/part-13.svg"},"part":13,"letter":"b","lang":"zh"}}},"pageContext":{"part":13,"letter":"b","lang":"zh"}}}